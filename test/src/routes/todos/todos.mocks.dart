// Mocks generated by Mockito 5.4.2 from annotations
// in crud_dart/test/src/routes/todos_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i3;

import 'package:dart_frog/dart_frog.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRequest_0 extends _i1.SmartFake implements _i2.Request {
  _FakeRequest_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRequestContext_1 extends _i1.SmartFake
    implements _i2.RequestContext {
  _FakeRequestContext_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpConnectionInfo_2 extends _i1.SmartFake
    implements _i3.HttpConnectionInfo {
  _FakeHttpConnectionInfo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_3 extends _i1.SmartFake implements Uri {
  _FakeUri_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFormData_4 extends _i1.SmartFake implements _i2.FormData {
  _FakeFormData_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RequestContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestContext extends _i1.Mock implements _i2.RequestContext {
  @override
  _i2.Request get request => (super.noSuchMethod(
        Invocation.getter(#request),
        returnValue: _FakeRequest_0(
          this,
          Invocation.getter(#request),
        ),
        returnValueForMissingStub: _FakeRequest_0(
          this,
          Invocation.getter(#request),
        ),
      ) as _i2.Request);
  @override
  _i2.RequestContext provide<T extends Object?>(T Function()? create) =>
      (super.noSuchMethod(
        Invocation.method(
          #provide,
          [create],
        ),
        returnValue: _FakeRequestContext_1(
          this,
          Invocation.method(
            #provide,
            [create],
          ),
        ),
        returnValueForMissingStub: _FakeRequestContext_1(
          this,
          Invocation.method(
            #provide,
            [create],
          ),
        ),
      ) as _i2.RequestContext);
  @override
  T read<T>() => (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
        ),
        returnValue: _i4.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [],
          ),
        ),
      ) as T);
}

/// A class which mocks [Request].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequest extends _i1.Mock implements _i2.Request {
  @override
  _i3.HttpConnectionInfo get connectionInfo => (super.noSuchMethod(
        Invocation.getter(#connectionInfo),
        returnValue: _FakeHttpConnectionInfo_2(
          this,
          Invocation.getter(#connectionInfo),
        ),
        returnValueForMissingStub: _FakeHttpConnectionInfo_2(
          this,
          Invocation.getter(#connectionInfo),
        ),
      ) as _i3.HttpConnectionInfo);
  @override
  Uri get url => (super.noSuchMethod(
        Invocation.getter(#url),
        returnValue: _FakeUri_3(
          this,
          Invocation.getter(#url),
        ),
        returnValueForMissingStub: _FakeUri_3(
          this,
          Invocation.getter(#url),
        ),
      ) as Uri);
  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_3(
          this,
          Invocation.getter(#uri),
        ),
        returnValueForMissingStub: _FakeUri_3(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);
  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
  @override
  _i2.HttpMethod get method => (super.noSuchMethod(
        Invocation.getter(#method),
        returnValue: _i2.HttpMethod.delete,
        returnValueForMissingStub: _i2.HttpMethod.delete,
      ) as _i2.HttpMethod);
  @override
  _i5.Stream<List<int>> bytes() => (super.noSuchMethod(
        Invocation.method(
          #bytes,
          [],
        ),
        returnValue: _i5.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<int>>.empty(),
      ) as _i5.Stream<List<int>>);
  @override
  _i5.Future<String> body() => (super.noSuchMethod(
        Invocation.method(
          #body,
          [],
        ),
        returnValue: _i5.Future<String>.value(''),
        returnValueForMissingStub: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
  @override
  _i5.Future<_i2.FormData> formData() => (super.noSuchMethod(
        Invocation.method(
          #formData,
          [],
        ),
        returnValue: _i5.Future<_i2.FormData>.value(_FakeFormData_4(
          this,
          Invocation.method(
            #formData,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.FormData>.value(_FakeFormData_4(
          this,
          Invocation.method(
            #formData,
            [],
          ),
        )),
      ) as _i5.Future<_i2.FormData>);
  @override
  _i5.Future<dynamic> json() => (super.noSuchMethod(
        Invocation.method(
          #json,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i2.Request copyWith({
    Map<String, Object?>? headers,
    String? path,
    Object? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #headers: headers,
            #path: path,
            #body: body,
          },
        ),
        returnValue: _FakeRequest_0(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #headers: headers,
              #path: path,
              #body: body,
            },
          ),
        ),
        returnValueForMissingStub: _FakeRequest_0(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #headers: headers,
              #path: path,
              #body: body,
            },
          ),
        ),
      ) as _i2.Request);
}
